Effective Java 第三版



第２章　オブジェクトの生成と消滅

項目１　コンストラクタの代わりにstaticファクトリメソッドを検討する

要旨　
コンストラクタとは、Javaの言語仕様によるオブジェクトの生成にかかわる初期化メソッドです。
＊比較としては、コンストラクタの仕様を理解していないことには、比較にならないが、個人的な勉強であるために記載はしない。
staticファクトリメソッドとは、デザインパターンに存在するFactoryMethodパターンとはおなじものではありません。
特徴としては以下のものがあります。５つの長所と２つの短所があります。
長所
・名前をもつ。
　staticファクトリメソッドを利用することで、可読性が向上する。
　コードを理解するコストが低下する。

・呼び出しごとにオブジェクトを生成する必要がない。
　何度よびだしても同じオブジェクトを返却できる。これは、デザインパターンのFlyweightパターンに似ており、インスタンス生成コストによってはパフォーマンスの向上が期待できる。
　この機能はインスタンス制御されているクラスによって行われ、以下のような制御が行われれる。
　・シングルトン
　・インスタンス化不可
　・２つの不変な値クラスが２つ同時にインスタンスを存在できない（Enumはこれを保証している）。

・戻り値の型を任意のサブタイプのオブジェクトにできる。
　
　どのオブジェクトを返すかの選択の柔軟性が得られ、クラスをPublicにしなくてもオブジェクトを返せるようになることで、実装クラスを隠ぺいすることができ簡潔なAPIとなる。
　この技法は「インターフェースに基づくフレームワーク」に向いており、そこでは、インターフェースが戻り値型となります。
　Java８以降で、インターフェースがStaticメソッドを持てることになり、この機能が可能になった。
　返却するクラスがPublicではない例としてTypesインターフェースと、コレクションクラスの４５個のユーティリティ実装があり、変更不可能なコレクション、同期されたコレクションなどを提供する。
　それにより実装クラスではなく、インターフェースで参照することが要求されるようになる。
　APIの量だけでなく、概念的な重みが軽くなっている。これにより、学習コストが軽減されます。
　
・返されるオブジェクトのクラスは、入力パラメータの値に応じて呼び出しごとに変えられる。
　宣言された戻り値のどのサブタイプでも許されます。
　例えば、EnumSetクラスのようにFactoryMethodしか持っておらず、Enumの型の大きさに応じてRegularEnumSetや、JumboEnumSetのインスタンスを返すように設計されている。
　将来、RegularEnumSetが提供されなくなったときに何の副作用なくとりのぞけます。

・返されるオブジェクトのクラスは、クラスが書かれた時点で存在する必要がない。
　staticファクトリメソッドは、例示されているJDBCのサービスプロバイダーフレームワークの基盤になっている。
　サービスプロバイダーフレームワークには、３つの基本的なコンポーネントと１つのオプションコンポーネントがあります。
　基本的なコンポーネント
　・サービスインターフェース
　・プロバイダー登録API
　・サービスアクセスAPI
　オプションコンポーネント
　・サービスプロバイダインターフェース
　staticファクトリメソッドを利用したコンポーネントは、DBの製品ごとの違いを柔軟に吸収しているということを言いたいのだろう。

短所
・publicあるいは、protectedのコンストラクタを持たないクラスのサブクラスをつくれない。
　これにより、プログラマは、継承ではなく、コンポジションを使うことを促される。
・プログラマが、見つけにくい。
　APIドキュメンテーションの中では目立たないために、分かりづらい。いずれ、改修が加えられて目立つようになるかもしれない。
　共通する命名規約を遵守することで、この問題は軽減できる。
　例えば、From,of,valueOf,instance,create,getType,newType,typeのように、共通的な名称により区別する方法がある。

コンストラクタと、staticファクトリメソッド、各々の使い方を比較すると、良い勉強になるでしょう。
たいていの場合は、staticファクトリメソッドの利用を優先的に検討し、コンストラクタ有りきでのクラス設計は避けるべきです。

検討の理由　
